name: CI
run-name: "CI • ${{ github.ref_name }}"

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

# 同一分支重复推送时，取消排队中的旧任务，节省 CI 分钟
concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  unit_tests:
    name: Unit (Jest)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node (with Yarn cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: yarn.lock

      - name: Install deps
        run: yarn install --frozen-lockfile

      # 你的项目里已经能直接调用 jest 命令/脚本，就保持最小侵入
      - name: Run Jest (CI mode + coverage)
        run: |
          # 若你已有 `yarn test:ci` 就把下一行换成它
          yarn run test
        env:
          CI: true

      - name: Upload coverage (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jest-coverage
          path: coverage/

  e2e_tests:
    name: E2E (Cypress headless)
    runs-on: ubuntu-latest
    needs: unit_tests     # 单测通过后再跑 E2E（按需可去掉）
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node (with Yarn cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: yarn.lock

      - name: Install deps
        run: yarn install --frozen-lockfile

      # 构建前端产物（Webpack/Vite/…都可，保持你项目里的命令）
      - name: Build app
        run: yarn run client:prod

      # 启动一个只在 CI 机器里的本地预览服务，给 Cypress 访问
      - name: Start preview server on 8080
        run: npx http-server dist -p 8080 --silent &
        # 如果你的构建产物不是 dist/，把路径改成实际输出目录

      # 用官方 Action 跑 Cypress；它会等到 8080 可访问再启动测试
      - name: Cypress run (chrome --headless)
        uses: cypress-io/github-action@v6
        with:
          # 你的项目里已经写好了命令，就让 action 只负责运行：
          install: false           # 依赖上一步已装好
          browser: chrome
          wait-on: 'http://localhost:8080'
          # 如果你有自定义脚本 `yarn e2e` 想直接调用，也可以：
          # command: yarn e2e
        env:
          # 如需在 E2E 里引用 baseUrl，这里给一个默认（cypress.config.ts 也可配置）
          CYPRESS_baseUrl: http://localhost:8080

      # 失败排查用：保存视频、截图
      - name: Upload Cypress artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-artifacts
          path: |
            cypress/videos/
            cypress/screenshots/